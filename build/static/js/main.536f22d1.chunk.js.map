{"version":3,"sources":["BooksAPI.js","Category.js","Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","Category","p","PropTypes","categoryTitle","string","isRequired","booksArr","array","changeCategory","func","react_default","a","createElement","className","map","Book","key","id","currBook","Search","BooksApp","_useState","useState","_useState2","Object","slicedToArray","setbooksArr","_useState3","_useState4","flag","setflag","useEffect","fetch","concat","then","res","json","data","books","currentBook","category","book","shelf","newBooksArr","find","idx","findIndex","push","method","objectSpread","Content-Type","body","JSON","stringify","react_router","path","render","src_Search","exact","src_Category","filter","ReactDOM","react_router_dom","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.536f22d1.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport Book from \"./Book.js\"\r\n\r\nconst Category = (p) => {\r\n\r\n    Category.PropTypes = {\r\n        categoryTitle: PropTypes.string.isRequired,\r\n        booksArr: PropTypes.array.isRequired,\r\n        changeCategory: PropTypes.func.isRequired\r\n    }\r\n\r\n    return <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{p.categoryTitle}</h2>\r\n        <div className=\"bookshelf-books\">\r\n            <ol className=\"books-grid\">\r\n                {\r\n                p.booksArr.map((Book)=>\r\n                <Book key={Book.id}\r\n                changeCategory={p.changeCategory}\r\n                currBook={Book}                \r\n                />\r\n                )}\r\n            </ol>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Category","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Search = (p) => {\r\n\r\n    Search.PropTypes= {\r\n        changeCategory: PropTypes.func.isRequired,\r\n        booksArr: PropTypes.array.isRequired\r\n    }\r\n\r\n\r\n    /*\r\n       <div\r\n            className=\"open-search\">\r\n              <Link to=\"/search\"> Add a Book</Link>\r\n            </div>\r\n            </div>\r\n      )}\r\n\r\n        <div className=\"search-books\">\r\n          <div className=\"search-books-bar\">\r\n            <button className=\"close-search\" onClick={() => this.setState({ showSearchPage: false })}>Close</button>\r\n            <div className=\"search-books-input-wrapper\">\r\n              {\r\n              <input type=\"text\" placeholder=\"Search by title or author\" />\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"search-books-results\">\r\n            <ol className=\"books-grid\"></ol>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n    */ \r\n\r\n\r\n}\r\n\r\nexport default Search","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\n// import Search from \"./Search.js\"\r\nimport Category from \"./Category.js\"\r\nimport { Route,Routes, Link } from 'react-router-dom'\r\nimport { useState, useEffect } from 'react';\r\nimport Search from \"./Search.js\"\r\n\r\nconst BooksApp = () => {\r\n\r\n  let [booksArr, setbooksArr] = useState([]);\r\n  let [flag, setflag] = useState(true);\r\n\r\n  //////////////////////////////////////////\r\n  useEffect(() => {\r\n    BooksAPI.getAll().then((books) => { setbooksArr(books); })\r\n  }, []);\r\n\r\n  const changeCategory = (currentBook, category) => {\r\n    const newBooksArr = booksArr\r\n    const found = booksArr.find(book => book.id === currentBook.id)\r\n    if (!found) {\r\n      currentBook.shelf = category\r\n      newBooksArr.push(currentBook)\r\n    }\r\n    else {\r\n      //find it in the booksArr\r\n      const idx = newBooksArr.findIndex((book) => book.id === currentBook.id)\r\n      newBooksArr[idx].shelf = category\r\n    }\r\n\r\n    setbooksArr(newBooksArr);\r\n\r\n    //updateAPI\r\n    BooksAPI.update(currentBook, category)\r\n    setflag(!flag);\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Routes>\r\n      <Route\r\n        path=\"/Search\"\r\n        render={() => (\r\n          <Search\r\n            changeCategory={changeCategory}\r\n            booksArr={booksArr}\r\n          />\r\n        )}\r\n      />\r\n\r\n      <Route\r\n        exact path=\"/\"\r\n        render={() => (\r\n          <div className=\"list-books\">\r\n            {/* //////////////////////////////////////// */}\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            {/* //////////////////////////////////////// */}\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <Category\r\n                  className=\"bookshelf\"\r\n                  categoryTitle=\"Currently Reading\"\r\n                  booksArr={booksArr.filter((book) => book.shelf === \"currentlyReading\")}\r\n                  changeCategory={changeCategory}\r\n                />\r\n\r\n                <Category\r\n                  className=\"bookshelf\"\r\n                  categoryTitle=\"Want to Read\"\r\n                  booksArr={booksArr.filter((book) => book.shelf === \"wantToRead\")}\r\n                  changeCategory={changeCategory}\r\n                />\r\n\r\n                <Category\r\n                  className=\"bookshelf\"\r\n                  categoryTitle=\"Read\"\r\n                  booksArr={booksArr.filter((book) => book.shelf === \"read\")}\r\n                  changeCategory={changeCategory}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      />\r\n      </Routes>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\ndocument.getElementById('root'))\r\n"],"sourceRoot":""}